<?php

/**
 * This is the model base class for the table "movimientocaja".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Movimientocaja".
 *
 * Columns in table "movimientocaja" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $idmovimientocaja
 * @property string $descripcion
 * @property string $fecha
 * @property integer $debeohaber
 * @property double $debe
 * @property double $haber
 * @property string $numerooperacion
 * @property integer $caja_idcaja
 * @property integer $rubro_idrubro
 * @property integer $formadepago_idformadepago
 * @property integer $id_de_trabajo
 *
 */
abstract class BaseMovimientocaja extends GxActiveRecord {
public $importe;
	public $total, $totaldebe,$fechacobro;
	public $total_debe,$total_haber;
	
	public function SumTotal($case,$mesTab,$anioTab){
		$sql='SELECT SUM(debe) AS total_debe,SUM(haber) AS total_haber, (SUM(debe)-SUM(haber)) AS resta  from movimientocaja WHERE year(fecha)='.$anioTab.' and month(fecha)='.$mesTab.' LIMIT 1';
		//$sql2="SELECT  from movimientocaja";
		$dbCommand = Yii::app()->db->createCommand($sql);
		//$dbCommand2 = Yii::app()->db->createCommand($sql2);
		$results = $dbCommand->queryAll();
		//$results2 = $dbCommand2->queryAll();
		$totaldebe = $results[0]['total_debe'];
		$totalhaber = $results[0]['total_haber'];
		$total=number_format($results[0]['resta'],2,".",",");
		
		//return $total;
	switch ($case) {
    case 0:
        return $totaldebe;
        break;
    case 1:
    	return $totalhaber;
        break;
    case 2:
    	return $total;
        break;
    case 3:
		    	if($total > 0){
		    		return true;
		    	} else {
		    		return false;
		    	}
        break;
}
	}
	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'movimientocaja';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Movimientocaja|Movimientocajas', $n);
	}

	public static function representingColumn() {
		return 'descripcion';
	}

	public function rules() {
		return array(
			array('descripcion, fecha, debeohaber, caja_idcaja, rubro_idrubro, formadepago_idformadepago', 'required'),
			array('debeohaber, caja_idcaja, rubro_idrubro, formadepago_idformadepago', 'numerical', 'integerOnly'=>true),
			array('debe, haber', 'numerical'),
			array('debe,haber', 'default','setOnEmpty'=>true, 'value'=>0),
			array('descripcion', 'length', 'max'=>150),
			array('numerooperacion, id_de_trabajo', 'length', 'max'=>20),
			array('debe, haber, numerooperacion, id_de_trabajo', 'default', 'setOnEmpty' => true, 'value' => null),
			array('idmovimientocaja, descripcion, fecha, debeohaber, debe, haber, numerooperacion, caja_idcaja, rubro_idrubro, formadepago_idformadepago, id_de_trabajo', 'safe', 'on'=>'search'),
			array('fechacobro','safe'),
			array('fechacobro', 'length', 'max'=>20),
			array('fechacobro','compararFechas'),
			);
	}

	public function relations() {
		return array(
			'rubroIdrubro' => array(self::BELONGS_TO, 'Rubro', 'rubro_idrubro'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'idmovimientocaja' => Yii::t('app', 'Idmovimientocaja'),
			'descripcion' => Yii::t('app', 'Descripcion'),
			'fecha' => Yii::t('app', 'Fecha'),
			'debeohaber' => Yii::t('app', 'Tipo de Movimiento'),
			'debe' => Yii::t('app', 'Debe'),
			'haber' => Yii::t('app', 'Haber'),
			'numerooperacion' => Yii::t('app', 'Numerooperacion'),
			'caja_idcaja' => Yii::t('app', 'Caja'),
			'rubro_idrubro' => Yii::t('app', 'Rubro'),
			'rubroIdrubro' => Yii::t('app', 'Rubro'),
			'formadepago_idformadepago' => Yii::t('app', 'Forma de pago'),
			'id_de_trabajo' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('idmovimientocaja', $this->idmovimientocaja);
		$criteria->compare('descripcion', $this->descripcion, true);
		//para poder buscar deacuerdo al formato de myql
		$criteria->compare("DATE_FORMAT(fecha,'%d/%m/%Y')",$this->fecha,true); 
		//$criteria->compare('fecha', $this->fecha, true);
		$criteria->compare('debeohaber', $this->debeohaber);
		$criteria->compare('debe', $this->debe);
		$criteria->compare('haber', $this->haber);
		$criteria->compare('numerooperacion', $this->numerooperacion, true);
		$criteria->compare('caja_idcaja', $this->caja_idcaja);
		$criteria->compare('rubro_idrubro', $this->rubro_idrubro);
		$criteria->compare('formadepago_idformadepago', $this->formadepago_idformadepago);
		$criteria->compare('id_de_trabajo', $this->id_de_trabajo);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
			'sort' => array(
				'defaultOrder' => array('fecha' => true),
			),
		));
	}
	public function behaviors()
	{
	    return array(
	    	'datetimeI18NBehavior' => array('class' => 'ext.DateTimeI18NBehavior.DateTimeI18NBehavior'),
	    	'ERememberFiltersBehavior' => array(
            	'class' => 'application.components.ERememberFiltersBehavior',
               	'defaults'=>array(),           /* optional line */
               	'defaultStickOnClear'=>false   /* optional line */
           	),
	    
	   ); // 'ext' is in Yii 1.0.8 version. For early versions, use 'application.extensions' instead.
	}
public function compararFechas($attribute,$params)
	 {
	 	
	if(isset($this->fechacobro) && !empty($this->attributes['fecha'])) {
	  $valoresPrimera = explode ("/", $this->fechacobro);   
	  $valoresSegunda = explode ("/", $this->attributes['fecha']); 
	
	  $diaP = $valoresPrimera[0];  
	  $mesP = $valoresPrimera[1];  
	  $anyoP = $valoresPrimera[2]; 
	
	  $diaS = $valoresSegunda[0];  
	  $mesS = $valoresSegunda[1];  
	  $anyoS = $valoresSegunda[2];
	
	  $diasPJuliano = gregoriantojd($mesP, $diaP, $anyoP);  
	  $diasSJuliano = gregoriantojd($mesS, $diaS, $anyoS);     
	  
	  if(!checkdate($mesP, $diaP, $anyoP)){
	    // "La fecha ".$primera." no es v&aacute;lida";
	    $this->addError($attribute,'Los datos ingresados no son correctos.');
	  }elseif(!checkdate($mesS, $diaS, $anyoS)){
	    // "La fecha ".$segunda." no es v&aacute;lida";
	     $this->addError($attribute,'Los datos ingresados no son correctos.');
	  }else{
	    if(($diasPJuliano-$diasSJuliano)> 0){
	    	$this->addError($attribute,'La fecha ingresada debe ser mayor a la fecha de cobro');
	    	}
	    }
	  } 
	}
	
	public function obtenerDebeHaber($mes,$anio)
        {
                $criteria=new CDbCriteria;
                
                $criteria->select = array(
                	'SUM(debe) AS total_debe, SUM(haber) AS total_haber',
                );

                $criteria->condition = 'YEAR(fecha)='.$anio.' and MONTH(fecha)='.$mes;
                $result = Movimientocaja::model()->find($criteria); 
                return new CActiveDataProvider($this, array(
                        'criteria'=>$criteria,
                ));
        }
}