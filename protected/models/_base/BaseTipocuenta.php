<?php

/**
 * This is the model base class for the table "tipocuenta".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Tipocuenta".
 *
 * Columns in table "tipocuenta" available as properties of the model,
 * followed by relations of table "tipocuenta" available as properties of the model.
 *
 * @property integer $idtipocuenta
 * @property string $nombre
 * @property string $codigocuenta
 * @property integer $tipogral_idtipogral
 *
 * @property Cuenta[] $cuentas
 * @property Subcuenta[] $subcuentas
 * @property Tipogral $tipogralIdtipogral
 */
abstract class BaseTipocuenta extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tipocuenta';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Tipocuenta|Tipocuentas', $n);
	}

	public static function representingColumn() {
		return 'nombre';
	}

	public function rules() {
		return array(
			array('nombre, codigocuenta, tipogral_idtipogral', 'required'),
			array('tipogral_idtipogral', 'numerical', 'integerOnly'=>true),
			array('nombre', 'length', 'max'=>100),
			array('codigocuenta', 'length', 'max'=>45),
			array('idtipocuenta, nombre, codigocuenta, tipogral_idtipogral', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'cuentas' => array(self::HAS_MANY, 'Cuenta', 'tipocuenta_idtipocuenta'),
			'subcuentas' => array(self::HAS_MANY, 'Subcuenta', 'tipocuenta_idtipocuenta'),
			'tipogralIdtipogral' => array(self::BELONGS_TO, 'Tipogral', 'tipogral_idtipogral'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'idtipocuenta' => Yii::t('app', 'Idtipocuenta'),
			'nombre' => Yii::t('app', 'Nombre'),
			'codigocuenta' => Yii::t('app', 'Codigocuenta'),
			'tipogral_idtipogral' => null,
			'cuentas' => null,
			'subcuentas' => null,
			'tipogralIdtipogral' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('idtipocuenta', $this->idtipocuenta);
		$criteria->compare('nombre', $this->nombre, true);
		$criteria->compare('codigocuenta', $this->codigocuenta, true);
		$criteria->compare('tipogral_idtipogral', $this->tipogral_idtipogral);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}