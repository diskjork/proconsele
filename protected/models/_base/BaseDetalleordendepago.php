<?php

/**
 * This is the model base class for the table "detalleordendepago".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Detalleordendepago".
 *
 * Columns in table "detalleordendepago" available as properties of the model,
 * followed by relations of table "detalleordendepago" available as properties of the model.
 *
 * @property integer $iddetalleordendepago
 * @property integer $tipoordendepago
 * @property double $importe
 * @property string $transferenciabanco
 * @property string $chequetitular
 * @property string $chequecuittitular
 * @property string $chequefechacobro
 * @property string $chequefechaingreso
 * @property string $nrocheque
 * @property integer $chequebanco
 * @property integer $ordendepago_idordendepago
 * @property integer $movimientocaja_idmovimientocaja
 * @property integer $cheque_idcheque
 * @property integer $movimientobanco_idmovimientobanco
 *
 * @property Cheque $chequeIdcheque
 * @property Movimientobanco $movimientobancoIdmovimientobanco
 * @property Movimientocaja $movimientocajaIdmovimientocaja
 * @property Ordendepago $ordendepagoIdordendepago
 */
abstract class BaseDetalleordendepago extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'detalleordendepago';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Detalleordendepago|Detalleordendepagos', $n);
	}

	public static function representingColumn() {
		return 'transferenciabanco';
	}

	public function rules() {
		return array(
			array('tipoordendepago, importe', 'required'),
			array('tipoordendepago, chequebanco, ordendepago_idordendepago, movimientocaja_idmovimientocaja, cheque_idcheque, movimientobanco_idmovimientobanco', 'numerical', 'integerOnly'=>true),
			array('importe', 'numerical'),
			array('transferenciabanco, chequetitular, chequecuittitular', 'length', 'max'=>100),
			array('nrocheque', 'length', 'max'=>20),
			array('chequefechacobro, chequefechaingreso', 'safe'),
			array('tipoordendepago, importe, transferenciabanco, chequetitular, chequecuittitular, chequefechacobro, chequefechaingreso, nrocheque, chequebanco, movimientocaja_idmovimientocaja, cheque_idcheque, movimientobanco_idmovimientobanco', 'default', 'setOnEmpty' => true, 'value' => null),
			array('iddetalleordendepago, tipoordendepago, importe, transferenciabanco, chequetitular, chequecuittitular, chequefechacobro, chequefechaingreso, nrocheque, chequebanco, ordendepago_idordendepago, movimientocaja_idmovimientocaja, cheque_idcheque, movimientobanco_idmovimientobanco', 'safe', 'on'=>'search'),
			array('tipoordendepago','validarDatosCheque'),
			array('tipoordendepago','validarDatosTransfe'),
		);
	}

	public function relations() {
		return array(
			'chequeIdcheque' => array(self::BELONGS_TO, 'Cheque', 'cheque_idcheque'),
			'movimientobancoIdmovimientobanco' => array(self::BELONGS_TO, 'Movimientobanco', 'movimientobanco_idmovimientobanco'),
			'movimientocajaIdmovimientocaja' => array(self::BELONGS_TO, 'Movimientocaja', 'movimientocaja_idmovimientocaja'),
			'ordendepagoIdordendepago' => array(self::BELONGS_TO, 'Ordendepago', 'ordendepago_idordendepago'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'iddetalleordendepago' => Yii::t('app', 'Iddetalleordendepago'),
			'tipoordendepago' => Yii::t('app', 'Tipoordendepago'),
			'importe' => Yii::t('app', 'Importe'),
			'transferenciabanco' => Yii::t('app', 'Banco'),
			'chequetitular' => Yii::t('app', 'Chequetitular'),
			'chequecuittitular' => Yii::t('app', 'Titular'),
			'chequefechacobro' => Yii::t('app', 'Fecha cobro'),
			'chequefechaingreso' => Yii::t('app', 'Fecha ingreso'),
			'nrocheque' => Yii::t('app', 'Nro. cheque'),
			'chequebanco' => Yii::t('app', 'Banco'),
			'ordendepago_idordendepago' => null,
			'movimientocaja_idmovimientocaja' => null,
			'cheque_idcheque' => null,
			'movimientobanco_idmovimientobanco' => null,
			'chequeIdcheque' => null,
			'movimientobancoIdmovimientobanco' => null,
			'movimientocajaIdmovimientocaja' => null,
			'ordendepagoIdordendepago' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('iddetalleordendepago', $this->iddetalleordendepago);
		$criteria->compare('tipoordendepago', $this->tipoordendepago);
		$criteria->compare('importe', $this->importe);
		$criteria->compare('transferenciabanco', $this->transferenciabanco, true);
		$criteria->compare('chequetitular', $this->chequetitular, true);
		$criteria->compare('chequecuittitular', $this->chequecuittitular, true);
		$criteria->compare('chequefechacobro', $this->chequefechacobro, true);
		$criteria->compare('chequefechaingreso', $this->chequefechaingreso, true);
		$criteria->compare('nrocheque', $this->nrocheque, true);
		$criteria->compare('chequebanco', $this->chequebanco);
		$criteria->compare('ordendepago_idordendepago', $this->ordendepago_idordendepago);
		$criteria->compare('movimientocaja_idmovimientocaja', $this->movimientocaja_idmovimientocaja);
		$criteria->compare('cheque_idcheque', $this->cheque_idcheque);
		$criteria->compare('movimientobanco_idmovimientobanco', $this->movimientobanco_idmovimientobanco);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
	public function behaviors()
		{
			 return array(
		    	'datetimeI18NBehavior' => array('class' => 'ext.DateTimeI18NBehavior.DateTimeI18NBehavior'),
		    	'ERememberFiltersBehavior' => array(
	            	'class' => 'application.components.ERememberFiltersBehavior',
	               	'defaults'=>array(),           /* optional line */
	               	'defaultStickOnClear'=>false   /* optional line */
	           	),
		    
		   ); // 'ext' is in Yii 1.0.8 version. For early versions, use 'application.extensions' instead.
		}
	public function validarDatosCheque($attribute,$params){
      	
    	if( $this->tipoordendepago == 1){
    		
    		switch (true){
    			case ($this->chequebanco == null):
    				$this->addError('chequebanco', 'Banco No puede ser nulo');
    				break;
    			case ($this->chequefechaingreso == null):
    				$this->addError('chequefechaingreso', 'Fecha recepciÃ³n No puede ser nulo');
    				break;
    			case ($this->chequetitular == null):
    				$this->addError('chequetitular', 'Titular no puede ser nulo');
    				break;
    			case ($this->chequecuittitular == null):
    				$this->addError('chequecuittitular', 'CUIT no puede ser nulo');
    				break;
    			case ($this->chequefechacobro == null):
    				$this->addError('chequefechacobro', 'Fecha Cobro No puede ser nulo');
    				break;
    			case ($this->nrocheque == null):
    				$this->addError('nrocheque', 'Nro. Cheque No puede ser nulo');
    				break;
    			
    		}
    	}
    }
	public function validarDatosTransfe($attribute,$params){
      	
    	if( $this->tipoordendepago == 2 && $this->transferenciabanco == null){
   				$this->addError('transferenciabanco', 'No puede ser nulo');
  			}
    }
}