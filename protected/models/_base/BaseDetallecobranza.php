<?php

/**
 * This is the model base class for the table "detallecobranza".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Detallecobranza".
 *
 * Columns in table "detallecobranza" available as properties of the model,
 * followed by relations of table "detallecobranza" available as properties of the model.
 *
 * @property integer $iddetallecobranza
 * @property integer $tipocobranza
 * @property double $importe
 * @property string $transferenciabanco
 * @property string $chequefechacobro
 * @property string $chequefechaingreso
 * @property string $nrocheque
 * @property integer $chequebanco
 * @property string $chequetitular
 * @property string $chequecuittitular
 * @property integer $cobranza_idcobranza
 * @property integer $movimientobanco_idmovimientobanco
 * @property integer $movimientocaja_idmovimientocaja
 * @property integer $cheque_idcheque
 *
 * @property Cheque $chequeIdcheque
 * @property Cobranza $cobranzaIdcobranza
 * @property Movimientobanco $movimientobancoIdmovimientobanco
 * @property Movimientocaja $movimientocajaIdmovimientocaja
 */
abstract class BaseDetallecobranza extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'detallecobranza';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Detallecobranza|Detallecobranzas', $n);
	}

	public static function representingColumn() {
		return 'transferenciabanco';
	}

	public function rules() {
		return array(
			array('tipocobranza, importe', 'required'),
			array('tipocobranza, chequebanco, cobranza_idcobranza,  caja_idcaja, iibbnrocomp , ivanrocomp', 'numerical', 'integerOnly'=>true),
			array('importe, iibbtasa,ivatasa,gantasa,patrtasa', 'numerical'),
			array('transferenciabanco, chequetitular, chequecuittitular, iibbcomprelac, ivacomprelac', 'length', 'max'=>100),
			array('nrocheque', 'length', 'max'=>20),
			array('chequefechacobro, chequefechaingreso, iibbfecha', 'safe'),
			array('transferenciabanco, chequefechacobro, chequefechaingreso, nrocheque, chequebanco, chequetitular, chequecuittitular, caja_idcaja, iibbfecha, iibbnrocomp, iibbcomprelac, iibbtasa, ivafecha, ivanrocomp, ivacomprelac, ivatasa,ganfecha,gannrocomp,gancomprelac,gantasa,patrfecha,patrnrocomp,patrcomprelac,patrtasa', 'default', 'setOnEmpty' => true, 'value' => null),
			array('iddetallecobranza, tipocobranza, importe, transferenciabanco, chequefechacobro, chequefechaingreso, nrocheque, chequebanco, chequetitular, chequecuittitular, cobranza_idcobranza, caja_idcaja, iibbfecha, iibbnrocomp, iibbcomprelac, iibbtasa, ivafecha, ivanrocomp, ivacomprelac, ivatasa,ganfecha,gannrocomp,gancomprelac,gantasa,patrfecha,patrnrocomp,patrcomprelac,patrtasa', 'safe', 'on'=>'search'),
			array('tipocobranza','validarDatosCheque'),
			array('tipocobranza','validarDatosTransfe'),
			array('tipocobranza','validarDatosEfectivo'),
			array('tipocobranza','validarDatosIIBB'),
			array('tipocobranza','validarDatosIVA'),
			array('tipocobranza','validarDatosGAN'),
			array('tipocobranza','validarDatosPATR'),
		);
	}

	public function relations() {
		return array(
			'cobranzaIdcobranza' => array(self::BELONGS_TO, 'Cobranza', 'cobranza_idcobranza'),
			'cajaIdcaja' => array(self::BELONGS_TO, 'Caja', 'caja_idcaja'),
			
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'iddetallecobranza' => Yii::t('app', 'Iddetallecobranza'),
			'tipocobranza' => Yii::t('app', 'Tipocobranza'),
			'importe' => Yii::t('app', 'Importe'),
			'transferenciabanco' => Yii::t('app', 'Banco'),
			'chequefechacobro' => Yii::t('app', 'Fecha cobro'),
			'chequefechaingreso' => Yii::t('app', 'Fecha Imision'),
			'nrocheque' => Yii::t('app', 'Nro.cheque'),
			'chequebanco' => Yii::t('app', 'Banco'),
			'chequetitular' => Yii::t('app', 'Titular'),
			'chequecuittitular' => Yii::t('app', 'CUIT titular'),
			'iibbnrocomp' => Yii::t('app', 'Nro.Compr'),
			'iibbfecha' => Yii::t('app', 'Fecha'),
			'iibbcomprelac'=> Yii::t('app', 'Compr.Relacionado'),
			'iibbtasa'=>Yii::t('app', 'Tasa %'),
			'ivanrocomp' => Yii::t('app', 'Nro.Compr'),
			'ivafecha' => Yii::t('app', 'Fecha'),
			'ivacomprelac'=> Yii::t('app', 'Compr.Relacionado'),
			'ivatasa'=>Yii::t('app', 'Tasa %'),
			'gannrocomp' => Yii::t('app', 'Nro.Compr'),
			'ganfecha' => Yii::t('app', 'Fecha'),
			'gancomprelac'=> Yii::t('app', 'Compr.Relacionado'),
			'gantasa'=>Yii::t('app', 'Tasa %'),
			'patrnrocomp' => Yii::t('app', 'Nro.Compr'),
			'patrfecha' => Yii::t('app', 'Fecha'),
			'patrcomprelac'=> Yii::t('app', 'Compr.Relacionado'),
			'patrtasa'=>Yii::t('app', 'Tasa %'),
			'cobranza_idcobranza' => null,
			'cobranzaIdcobranza' => null,
			'cajaIdcaja'=> null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('iddetallecobranza', $this->iddetallecobranza);
		$criteria->compare('tipocobranza', $this->tipocobranza);
		$criteria->compare('importe', $this->importe);
		$criteria->compare('transferenciabanco', $this->transferenciabanco, true);
		$criteria->compare('chequefechacobro', $this->chequefechacobro, true);
		$criteria->compare('chequefechaingreso', $this->chequefechaingreso, true);
		$criteria->compare('nrocheque', $this->nrocheque, true);
		$criteria->compare('chequebanco', $this->chequebanco);
		$criteria->compare('chequetitular', $this->chequetitular, true);
		$criteria->compare('chequecuittitular', $this->chequecuittitular, true);
		$criteria->compare('cobranza_idcobranza', $this->cobranza_idcobranza);
		$criteria->compare('iibbnrocomp', $this->iibbnrocomp);
		$criteria->compare('iibbfecha', $this->iibbfecha);
		$criteria->compare('iibbcomprelac', $this->iibbcomprelac);
		$criteria->compare('iibbtasa', $this->iibbtasa);
		$criteria->compare('ivanrocomp', $this->ivanrocomp);
		$criteria->compare('ivafecha', $this->ivafecha);
		$criteria->compare('ivacomprelac', $this->ivacomprelac);
		$criteria->compare('ivatasa', $this->ivatasa);
		$criteria->compare('gannrocomp', $this->gannrocomp);
		$criteria->compare('ganfecha', $this->ganfecha);
		$criteria->compare('gancomprelac', $this->gancomprelac);
		$criteria->compare('gantasa', $this->gantasa);
		$criteria->compare('patrnrocomp', $this->patrnrocomp);
		$criteria->compare('patrfecha', $this->patrfecha);
		$criteria->compare('patrcomprelac', $this->patrcomprelac);
		$criteria->compare('patrtasa', $this->patrtasa);
		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
	public function behaviors()
		{
			 return array(
		    	'datetimeI18NBehavior' => array('class' => 'ext.DateTimeI18NBehavior.DateTimeI18NBehavior'),
		    	'ERememberFiltersBehavior' => array(
	            	'class' => 'application.components.ERememberFiltersBehavior',
	               	'defaults'=>array(),           /* optional line */
	               	'defaultStickOnClear'=>false   /* optional line */
	           	),
		    
		   ); // 'ext' is in Yii 1.0.8 version. For early versions, use 'application.extensions' instead.
		}
	public function validarDatosCheque($attribute,$params){
      	
    	if( $this->tipocobranza == 1){
    		
    		switch (true){
    			case ($this->chequebanco == null):
    				$this->addError('chequebanco', 'Banco No puede ser nulo');
    				break;
    			case ($this->chequefechaingreso == null):
    				$this->addError('chequefechaingreso', 'Fecha Ingreso No puede ser nulo');
    				break;
    			case ($this->chequetitular == null):
    				$this->addError('chequetitular', 'Titular no puede ser nulo');
    				break;
    			case ($this->chequecuittitular == null):
    				$this->addError('chequecuittitular', 'CUIT no puede ser nulo');
    				break;
    			case ($this->chequefechacobro == null):
    				$this->addError('chequefechacobro', 'Fecha Cobro No puede ser nulo');
    				break;
    			case ($this->nrocheque == null):
    				$this->addError('nrocheque', 'Nro. Cheque No puede ser nulo');
    				break;
    			
    		}
    	}
    }
	public function validarDatosTransfe($attribute,$params){
      	
    	if( $this->tipocobranza == 2 && $this->transferenciabanco == null){
   				$this->addError('transferenciabanco', 'No puede ser nulo');
  			}
    }
	public function validarDatosEfectivo($attribute,$params){
      	
    	if( $this->tipocobranza == 0 && $this->caja_idcaja == null){
   				$this->addError('caja_idcaja', 'No puede ser nulo');
  			}
    }
	public function validarDatosIIBB($attribute,$params){
      	
    	if( $this->tipocobranza == 3){
    		
    		switch (true){
    			case ($this->iibbnrocomp == null):
    				$this->addError('iibbnrocomp', 'No puede ser nulo');
    				break;
    			case ($this->iibbfecha == null):
    				$this->addError('iibbfecha', 'Fecha No puede ser nula');
    				break;
    						
    		}
    	}
    }
	public function validarDatosIVA($attribute,$params){
      	
    	if( $this->tipocobranza == 4){
    		
    		switch (true){
    			case ($this->ivanrocomp == null):
    				$this->addError('ivanrocomp', 'No puede ser nulo');
    				break;
    			case ($this->ivafecha == null):
    				$this->addError('ivafecha', 'Fecha No puede ser nula');
    				break;
    						
    		}
    	}
    }
	public function validarDatosGAN($attribute,$params){
      	
    	if( $this->tipocobranza == 5){
    		
    		switch (true){
    			case ($this->gannrocomp == null):
    				$this->addError('gannrocomp', 'No puede ser nulo');
    				break;
    			case ($this->ganfecha == null):
    				$this->addError('ganfecha', 'Fecha No puede ser nula');
    				break;
    						
    		}
    	}
    }
	public function validarDatosPATR($attribute,$params){
      	
    	if( $this->tipocobranza == 6){
    		
    		switch (true){
    			case ($this->patrnrocomp == null):
    				$this->addError('patrnrocomp', 'No puede ser nulo');
    				break;
    			case ($this->patrfecha == null):
    				$this->addError('patrfecha', 'Fecha No puede ser nula');
    				break;
    						
    		}
    	}
    }
}