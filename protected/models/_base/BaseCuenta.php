<?php

/**
 * This is the model base class for the table "cuenta".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Cuenta".
 *
 * Columns in table "cuenta" available as properties of the model,
 * followed by relations of table "cuenta" available as properties of the model.
 *
 * @property integer $idcuenta
 * @property string $codigocta
 * @property string $nombre
 * @property integer $tipocuenta_idtipocuenta
 * @property integer $asentable
 *
 * @property Asiento[] $asientos
 * @property Caja[] $cajas
 * @property Tipocuenta $tipocuentaIdtipocuenta
 * @property Factura[] $facturas
 */
abstract class BaseCuenta extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'cuenta';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Cuenta|Cuentas', $n);
	}

	public static function representingColumn() {
		return 'nombre';
	}

	public function rules() {
		return array(
			array('codigocta, nombre, tipocuenta_idtipocuenta, asentable', 'required'),
			array('tipocuenta_idtipocuenta, asentable', 'numerical', 'integerOnly'=>true),
			array('codigocta, nombre', 'length', 'max'=>45),
			array('idcuenta, codigocta, nombre, tipocuenta_idtipocuenta, asentable', 'safe', 'on'=>'search'),
			array('codigocta','nuevaCuentaRepetida'),
		);
	}

	public function relations() {
		return array(
			'asientos' => array(self::HAS_MANY, 'Asiento', 'cuenta_idcuenta'),
			'cajas' => array(self::HAS_MANY, 'Caja', 'cuenta_idcuenta'),
			'tipocuentaIdtipocuenta' => array(self::BELONGS_TO, 'Tipocuenta', 'tipocuenta_idtipocuenta'),
			'facturas' => array(self::HAS_MANY, 'Factura', 'cuenta_idcuenta'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'idcuenta' => Yii::t('app', 'Idcuenta'),
			'codigocta' => Yii::t('app', 'Codigo cuenta'),
			'nombre' => Yii::t('app', 'Nombre'),
			'tipocuenta_idtipocuenta' => null,
			'asentable' => Yii::t('app', 'Asentable'),
			'asientos' => null,
			'cajas' => null,
			'tipocuentaIdtipocuenta' => null,
			'facturas' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('idcuenta', $this->idcuenta);
		$criteria->compare('codigocta', $this->codigocta, true);
		$criteria->compare('nombre', $this->nombre, true);
		$criteria->compare('tipocuenta_idtipocuenta', $this->tipocuenta_idtipocuenta);
		$criteria->compare('asentable', $this->asentable);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
	public function nuevaCuentaRepetida($attribute,$params){
		$codnueva=$this->codigocta;
		$existcuenta=Cuenta::model()->count('codigocta=:codnueva',array(':codnueva'=>$codnueva));
		
		if($existcuenta > 0){
			$this->addError('codigocta', 'Ya existe una cuenta con este cÃ³digo');
		}
	}
	private $codNombre;
	
	public function getcodNombre()
	{
	    return $this->codigocta." - ".$this->nombre;
	}
}